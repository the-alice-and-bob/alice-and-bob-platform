{
  "rule": {
    "name": "API Security News",
    "matchesToday": null,
    "matchesTotal": "0"
  },
  "items": [
    {
      "crawlTimeMsec": "1728581072677",
      "timestampUsec": "1728581072677023",
      "id": "tag:google.com,2005:reader/item/00000009f8c0ef59",
      "categories": [
        "user/1003836005/state/com.google/reading-list",
        "user/1003836005/state/com.google/fresh"
      ],
      "title": "Issue 256: Privilege escalation bugs in Kia vehicles, Cisco and Gov APIs, NIST’s new rules for password security",
      "published": 1728576426,
      "updated": 0,
      "canonical": [
        {
          "href": "https://apisecurity.io/issue-256-privilege-escalation-bugs-in-kia-vehicles-cisco-and-gov-apis-nists-new-rules-for-password-security/"
        }
      ],
      "alternate": [
        {
          "href": "https://apisecurity.io/issue-256-privilege-escalation-bugs-in-kia-vehicles-cisco-and-gov-apis-nists-new-rules-for-password-security/",
          "type": "text/html"
        }
      ],
      "summary": {
        "direction": "ltr",
        "content": "<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">This week, we review three different cases of API authorization and privilege escalation vulnerabilities, each of which is a wake-up call for API teams. We examine NIST updates on password security guidelines and share findings from an industry survey on API security and an upcoming OWASP API Top 10 webinar.  </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Also this week we celebrate APISecurity.io’s 6th anniversary! Since publishing Issue #1 on October 11, 2018, the newsletter has become a trusted resource for staying up-to-date on the latest threats, best practices, innovations, and solutions in the API security space. Thank you to all subscribers for your continued feedback and support as we work to provide timely and valuable content to drive the conversation around API security. </span></p> \n<h2><span style=\"font-weight:400;\">Industry News: NIST updates the rules for password security</span></h2> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">In the latest revision of </span><a href=\"https://pages.nist.gov/800-63-4/sp800-63b.html#password\"><span style=\"font-weight:400;\">Special Publication 800-63 Digital Identity Guidelines</span></a><span style=\"font-weight:400;\">, the U.S. National Institute of Standards and Technology (NIST) updated the rules for password security, including changing the guidelines for password complexity and composition from recommendations (should, should not) to requirements (shall, shall not).</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Forcing users to create complex passwords that include letters, numbers, and special characters can be counterproductive when it doesn’t result in strong and unpredictable passwords (the infamous “Password1!”). This was acknowledged in the original NIST publication in 2017, but the latest update now establishes clear requirements that password verifiers must not impose these composition rules on users.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">You can read the rationale behind the changes to password strength in the </span><a href=\"https://pages.nist.gov/800-63-4/sp800-63b.html#appA\"><span style=\"font-weight:400;\">Appendix</span></a><span style=\"font-weight:400;\">. One point from the summary I think is worth noting for development teams: </span></p> \n<p style=\"font-weight:400;\"><i><span style=\"font-weight:400;\">“Furthermore, other mitigations such as blacklists, secure hashed storage, and rate limiting are more effective at preventing modern brute-force attacks. Therefore, no additional complexity requirements are imposed.”</span></i></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">So while the burden of complexity is being lifted off the end user (a good thing), these changes put an additional responsibility on development teams to ensure robust protections against brute force attacks on the functions and APIs that perform password verification.</span></p> \n<h2><span style=\"font-weight:400;\">Vulnerability: Kia vehicle’s insecure partner API hacked </span></h2> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">A </span><a href=\"https://samcurry.net/hacking-kia\"><span style=\"font-weight:400;\">report</span></a><span style=\"font-weight:400;\"> by researcher Sam Curry describes how a team of ethical hackers discovered vulnerabilities in Kia’s APIs that allowed them to take over user accounts and remotely control vehicles. In <a style=\"font-weight:400;\" href=\"https://apisecurity.io/issue-253-breached-companies-face-litigation-sql-injection-in-cisco-apis-api-security-for-automotive-finance/\">issue 253</a> we referenced an industry white paper from VicOne on this very topic.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">The main weakness was a dealer registration endpoint without any identification or verification checks, so any online user could register as a Kia dealer. A dealer has an elevated role, or partnership, with the vehicle manufacturer, and so is granted privileged access to systems and API services. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">So once registered as a fake Kia dealer, the research team was able to use Kia’s dealer APIs to query vehicle owner’s personal information, add an attacker as the primary owner of the vehicle, and ultimately execute remote commands to control the vehicle. A video demonstration is included in the report.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Partner APIs typically provide privileged access to services and data and so need additional layers of security, and testing, around the registration process. Imagine how much harder it would be to hack this system if dealer registration was limited to a whitelist of approved email domains?</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Or better yet, use mutual TLS so that dealer registration is only possible from a particular office or terminal. Don’t make it easy for hackers. If they want unauthorized access to partner APIs, force them to break glass and climb through some windows!</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">The report also highlights that obfuscation offers little protection. Just because your APIs and endpoints are hidden and undocumented doesn’t mean hackers won’t find them. The process by which this team discovered the dealer registration endpoint is a valuable lesson for API teams to heed.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Great writeup by Sam Curry. Essential reading for API teams.</span></p> \n<h2><span style=\"font-weight:400;\">Vulnerability: Broken Authorization in Cisco Nexus Platform APIs</span></h2> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Continuing on the topic of privileged access and vulnerable APIs, a Cisco </span><a href=\"https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-ndhs-uaapi-Jh4V6zpN#fs\"><span style=\"font-weight:400;\">security advisory</span></a><span style=\"font-weight:400;\"> highlights several REST API vulnerabilities that allow a low-privileged user to access administrator-level services on the Cisco Nexus Dashboard.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Cisco Nexus Dashboard is a centralized management platform for provisioning, managing, and operating data center networks. According to the advisory, the vulnerabilities involve missing or insufficient authorization checks on the REST API, which could allow an attacker to upload malicious files and read or delete sensitive data.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Incidents of attackers gaining privileged access to API services are often exploits of broken function level authorization (BFLA). According to </span><a href=\"https://owasp.org/API-Security/editions/2023/en/0xa5-broken-function-level-authorization/\"><span style=\"font-weight:400;\">OWASP</span></a><span style=\"font-weight:400;\">, BFLA vulnerabilities are common and easy to exploit and can lead to data disclosure and service disruption.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">The guidelines to prevent BFLA suggest adopting a zero-trust approach where access is denied by default, and requiring specific roles or permissions before access is granted. BFLA specific tests can also be run as part of automated continuous testing, to check if non-authorized users can gain access to privileged APIs.</span></p> \n<h2><span style=\"font-weight:400;\">Vulnerability: Privilege escalation flaw in e-filing platform API</span></h2> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">A recent </span><a href=\"https://www.securityweek.com/court-data-exposed-by-vulnerabilities-in-software-used-by-us-government-researcher/\"><span style=\"font-weight:400;\">article</span></a><span style=\"font-weight:400;\"> in SecurityWeek describes how cybersecurity researcher Jason Parker claims to have discovered critical vulnerabilities in a number of public platforms used in the United States’ justice systems.  </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">In one report, the researcher describes an API vulnerability discovered in the Granicus e-filing platform that allows a regular user to elevate their access levels. The e-filing system is used to submit legal documents to state courts. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">According to the researcher’s </span><a href=\"https://github.com/qwell/disclosures/blob/main/README-2024-09-27-granicus-efiling.md\"><span style=\"font-weight:400;\">disclosure document</span></a><span style=\"font-weight:400;\">, the vulnerability is exploited by sending an API request to the platform with a special “TypeCode” property in the payload. If the TypeCode matched a value for a privileged account on the system, like a court or administrator account, the user’s access level was escalated.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">This has the typical characteristics of an API mass assignment vulnerability, or a </span><a href=\"https://owasp.org/API-Security/editions/2023/en/0xa3-broken-object-property-level-authorization/\"><span style=\"font-weight:400;\">Broken Object Property Level Authorization</span></a><span style=\"font-weight:400;\"> (BOPLA) vulnerability in the OWASP API Security Top 10 list. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">BOPLA exploits can cause a range of different adverse effects, from crashing a server to escalating a user’s role and access permissions. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">An API should be securely designed to constrain the properties it accepts to only those that are expected. Additional properties should be rejected by default, to avoid unexpected behavior in the API. </span></p> \n<h2><span style=\"font-weight:400;\">Industry Report: 30% of public APIs are completely unprotected</span></h2> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">F5 recently published a supplemental </span><a href=\"https://www.f5.com/go/report/state-of-application-strategy-report-api-security\"><span style=\"font-weight:400;\">report</span></a><span style=\"font-weight:400;\"> titled “The Secret Life of APIs” summarizing the views of API decision makers, primarily C-level, on their current API security posture.</span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">From what I’ve read, the results range from suspiciously optimistic to shockingly pessimistic. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">On the optimistic side:</span></p> \n<ul style=\"font-weight:400;\"> \n<li style=\"font-weight:400;\"><span style=\"font-weight:400;\">80% of organizations claim to begin API security in the API design phase</span></li> \n<li style=\"font-weight:400;\"><span style=\"font-weight:400;\">59% say they incorporate security at every stage of the API lifecycle</span></li> \n</ul> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">Security-by-design is the recommended approach to API security. However the devil is in the details, and some of the other statistics that emerge from the report suggest that teams are struggling to get some of the basics right:</span></p> \n<ul style=\"font-weight:400;\"> \n<li style=\"font-weight:400;\"><span style=\"font-weight:400;\">More than 30% of public APIs use the unsecure HTTP protocol</span></li> \n<li style=\"font-weight:400;\"><span style=\"font-weight:400;\">Two-thirds of organizations leave their operational workflow APIs unsecured</span></li> \n</ul> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">The report also highlights how AI solutions are enabled by API-based integrations, so AI solutions will continue to be vulnerable until APIs are secured. </span></p> \n<p style=\"font-weight:400;\"><span style=\"font-weight:400;\">The take-away message from the report is that organizations must adopt a zero trust model for API security, to be implemented throughout the API lifecycle from development to operational phases. This is a recurring conclusion in industry reports for achieving effective API security.</span></p> \n<h2><span style=\"font-weight:400;\">Webinar: Mitigate OWASP API risks through security-by-design</span></h2> \n<p><a href=\"https://42crunch.com/mitigate-owasp-api-risks-through-security-by-design/\"><img src=\"https://apisecurity.io/wp-content/uploads/2024/10/Webinar-Mitigating-OWASP-Featured-image-300x173.png\" alt=\"\" width=\"598\" height=\"345\"></a></p> \n<p>The OWASP Top 10 API Security Risk list provides a clear roadmap of the most common and dangerous vulnerabilities that can compromise your APIs. <a href=\"https://42crunch.com/mitigate-owasp-api-risks-through-security-by-design/\">In this webinar</a>, you will learn how to incorporate the OWASP guidelines into your security initiatives for software development to help build secure, resilient APIs by design. This session will offer practical insights to enhance the security of your applications.</p> \n<p><strong>Key takeaways include?</strong></p> \n<ul> \n<li>Why adopt security by design?</li> \n<li>How to leverage OWASP guidelines for API development</li> \n<li>How to get developers invested in the security of their APIs</li> \n</ul> \n<p>The post <a href=\"https://apisecurity.io/issue-256-privilege-escalation-bugs-in-kia-vehicles-cisco-and-gov-apis-nists-new-rules-for-password-security/\">Issue 256: Privilege escalation bugs in Kia vehicles, Cisco and Gov APIs, NIST’s new rules for password security</a> appeared first on <a href=\"https://apisecurity.io/\">API Security News</a>.</p>"
      },
      "author": "Mark Dolan",
      "likingUsers": [ ],
      "comments": [ ],
      "commentsNum": -1,
      "annotations": [ ],
      "origin": {
        "streamId": "feed/https://apisecurity.io/feed/index.xml",
        "title": "API Security News",
        "htmlUrl": "https://apisecurity.io/"
      }
    }
  ]
}
